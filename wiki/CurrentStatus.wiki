#labels xproc,xml,xquery
21/04/2009 xprocxq has now been ported to eXist 

== Changelog ==

Check out [http://xprocxq.googlecode.com/svn/trunk/main/ChangeLog Changelog] included in the source distro.

== Issues ==

The [http://code.google.com/p/xprocxq/issues/list project issue tracker] is the best place to find and submit issues.

== Limitations and Issues ==

xprocxq, being implemented in XQuery, currently has several
limitations and is no where compliant with the existing XProc 
draft specification.

As I originally developed using SAXON-SA, I have had to disable 
many of XProc steps as I port across but should have a good set 
of steps running somewhat soon.

Here is a list of the more severe limitations:

* due to my use of weak typing in XQuery there are several 
interrelated issues, but this will change as I sanitize the code

* currently there is little consistent support for sequences 
where you would expect them, once again I am addressing this as I 
work porting things across 

* defining reusable pipelines using p:library, p:import and p:declare-step 
is currently disabled 

* errors are thrown as XQuery errors, making it difficult to report
correct line numbers, not to mention that errors themselves look quite
ugly

* need to use ./ convention in p:when (in p:choose) test attributes 
due to limitation in eXist util:eval function

* some step sorting issues (intermixing of steps using p:inline), best
to use explicit port binding to avoid.

* p:xquery currently uses a c:result element to output, I also added a
xproc:escape attribute to c:query to avoid having to wrap XQuery using
CDATA (which is XProc spec requirement).

* declare base-uri affects module imports (need to investigate across 
all XQuery processors)

* cant pass required/add-attribute--002.xml test depends on namespace 
handling module to be finished

* errors and/or p:error does not write to error port (also discussing 
need for a generic 'implementator specific error code' with XProc WG)

* current preparsing routine is naive; I have a more rigorous solution 
in a source control branch to merge


== Roadmap ==

Looks like this for now.

  * release eXist version ('throw it over the wall')
  * implement as many of the standard & optional steps as possible
  * refactor handling of sequences
  * refactor weak typing and preparse routines
  * ensure static and dynamic error checking is working properly
  * create namespace handling module to implement more sophisticated namespace fixup 