21/04/2009 xprocxq has now been ported to eXist and I am releasing today

== Changelog ==

Check out [http://xprocxq.googlecode.com/svn/trunk/main/ChangeLog Changelog] included in the source code. This file is  not always up to date in trunk but will reflect reality for tag releases.


== Issues ==

The [http://code.google.com/p/xprocxq/issues/list project issue tracker] is the best place to find and submit issues.


== Limitations and Issues ==

xprocxq, being implemented in XQuery, currently has several limitations and is no where compliant with the existing XProc draft specification. I also made the decision some time ago to use weak typing which assisted in coming up with a core processor that will be portable across XQuery processors, but I am now in the process of refactoring with explicit typing.

As I originally developed using SAXON-SA, I have had to disable many of XProc steps as I port across but should have a good set of steps running somewhat soon.

Here is a list of the more severe limitations:

* due to my use of weak typing in XQuery there are several interrelated issues, but this will change as I sanitize the code
* currently there is little consistent or no support for sequences where you would expect them, once again I am addressing this as I work porting things across 
* defining reusable pipelines using p:library and p:declare-step is currently disabled 
* errors will first start out as an XQuery error.For example, you will see that errors are reported to originate from util.xqm as this is where static and dynamic errors are evaluated.
* need to use ./ convention in p:when (in p:choose) test attributes due to eXist
* some step sorting issues (intermixing of steps using p:inline)
* p:xquery currently uses a c:result element to output
* p:xquery needs to use a <!CDATA[]> section to wrap up contents of c:query (yes, I know working on it)
* extension functions do not work at this moment in time
* declare base-uri affects module imports (need to investigate across all XQuery processors)
* cant pass required/add-attribute--002.xml test depends on namespace handling module to be finished
* errors and/or p:error does not write to error port (also discussing need for a generic 'implementator specific error code' with XProc WG)
* current preparsing routine is naive; I have a more rigorous solution in a branch to merge soon

and many more .....

Please review the examples included in the release version to get a sense of what is possible with the current version.


_Note: Looking at the current trunk/TODO file will help you determine what I am focusing on for now._

== Roadmap ==

Looks like this for now.

  * release eXist version and 'throw it over the wall'
  * implement all standard steps
  * implement optional & extension steps
  * enable sequences
  * refactor weak typing and preparse routines
  * ensure static and dynamic error checking is working properly
  * check namespace fixup works as outlined in spec
  * fix step sorting issues