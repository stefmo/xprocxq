#summary Describes current 'state of play' with xproc.xq

= Status =

22/11/2008  working out some very tricky and deep bugs, just got through a 2 week bug hunt, I hope this means a release is soon

= Changelog =

Check out the [http://xprocxq.googlecode.com/svn/trunk/main/ChangeLog Changelog] included in the source code. This file is  not always up to date in trunk but will reflect reality for tag releases.


= TODO =

The source code [http://xprocxq.googlecode.com/svn/trunk/main/TODO TODO] file is the best place to find this information.


= Limitations and Issues=

There are so many issues to list .... so I will just highlight the major ones;

  * depends on one having bought Michael Kay's [http://www.saxonica.com Saxon-SA]  XSLT/XQUERY processor ... as dependent on SA version and even then it does very little ;)

  * sequences inconsistent

  * sync all error messages

  * working on subpipelines, imports and libraries and related issues such as precedence, etc

  * fixing non primary input/output handling


This example pipeline, using p:identity step

{{{
 <p:pipeline xmlns:p="http://www.w3.org/ns/xproc"
                name="pipeline">
  
  <p:identity name="test"/>

</p:pipeline>

}}}

would generate the following debug output (-d option)

{{{
<?xml version="1.0" encoding="UTF-8"?>
<xproc:debug xmlns:xproc="http://xproc.net/xproc">
   <xproc:pipeline>
      <p:declare-step xmlns:p="http://www.w3.org/ns/xproc" xproc:defaultname="!1" name="pipeline">
         <ext:pre xmlns:ext="http://xproc.net/xproc/ext" name="pipeline|" xproc:defaultname="!1.1"
                  xproc:type="ext">
            <p:input port="source" primary="true" select="/">
               <p:pipe step="pipeline|" port="stdin"/>
            </p:input>
            <p:output port="result" primary="true" select=""/>
            <p:output primary="true" port="result"/>
         </ext:pre>
         <p:identity name="test" xproc:defaultname="!1.2" xproc:type="std">
            <p:input port="source" primary="true" select="/"/>
            <p:output port="result" primary="true" select=""/>
         </p:identity>
         <ext:post xmlns:ext="http://xproc.net/xproc/ext" name="!1.3" xproc:defaultname="!1.3"
                   xproc:type="ext">
            <p:input port="source" primary="true" select="/"/>
            <p:output port="stdout" primary="true" select=""/>
         </ext:post>
      </p:declare-step>
   </xproc:pipeline>
   <xproc:outputs>
      <xproc:output func="" step="pipeline|" port="stdin">
         <test>
            <a>test1</a>
            <b/>
            <c>
        I wish I was a fish
          <d/>
            </c>
         </test>
      </xproc:output>
      <xproc:output func="$ext:pre" step="pipeline|" port="result">
         <test>
            <a>test1</a>
            <b/>
            <c>
        I wish I was a fish
          <d/>
            </c>
         </test>
      </xproc:output>
      <xproc:output func="$std:identity" step="test" port="result">
         <test>
            <a>test1</a>
            <b/>
            <c>
        I wish I was a fish
          <d/>
            </c>
         </test>
      </xproc:output>
      <xproc:output func="$ext:post" step="!1.3" port="stdout">
         <test>
            <a>test1</a>
            <b/>
            <c>
        I wish I was a fish
          <d/>
            </c>
         </test>
      </xproc:output>
   </xproc:outputs>
</xproc:debug>

}}}

_Note: Looking at the current trunk/TODO file will help you determine what I am focusing on for now._

= When will you release and will xproc.xq be compliant ? =

If I had a road map it would be;

  * update testsuite (50% done)
  * do standard steps implementations (60% done)
  * do optional & extension steps implementations (60% done)
  * ensure static and dynamic error checking is working properly (40% done)
  * ensure namespaces are fixed up properly (20% done)
  * build process to derive eXist and Saxon impl from same codebase (20% done)

I will need to get each of the above nearer 100% before I release.

So far, the real problems with XProc compliance revolve around;

  * Try/Catch mechanism
  * import mechanisms
  * validating functional signatures