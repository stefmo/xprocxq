----------------------------------------
general
----------------------------------------

replace calls to secondary with a u:get-binding-output() function

----------------------------------------
p:choose
----------------------------------------
* each subpipeline must have the same output signature
* need to ensure source input gets bound
* need to cater for multiple p:when statements
* xpath-context is just a p:input used with $when_eval

after container
before container

----------------------------------------
ISSUE
----------------------------------------

* components/multi-container steps needs implementation (p:group,p:viewport,p:choose,p:for-each, p:pipeline, p:library, p:try/catch)
* migrate errors from string to QName
* make error reporting look nicer and try to get some semblance of line number reporting correct
* declare-steps needs refactoring in parsing and execution
* inputs in nested p:declare-steps need fixing due to $allcomp in xproc:explicitnames
* namespace fixups: enumerate step level in scope namespaces
* sequences need rationalisation and sanitisation
* p:try in evalstep ?
* target main eXist scenarios
    - xquery->p:choose->xquery
    - xslt -> xslfo -> pdf
	- form handler
	- the same applies to all apps where a user needs to log in first
	- how about a simple wizard-style example, e.g. along the lines of the "number guessing" example in eXist. I think the page flow logic could all be done in xproc.
	
* create namespace module to manage namespace fixups 
* testsuite represents sequences as t:document in count-001.xml in testing suite ?







